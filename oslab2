#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/sem.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SEM_PATH "/home/mayoral"

void P(int semid,int index);
void V(int semid,int index);
void *subp1();
void *subp2();

int sem_id;
int sum=0;
pthread_t p1,p2;

union semun{
    int val;
    struct semid_ds *buf;
    unsigned short array;
};

int main(void){
    int key,flag;
    union semun arg;
    flag=IPC_CREAT|0666;
    key=ftok(SEM_PATH,'a');
    if(key==-1){
        printf("ftok error!\n");
        return -1;
    }
    sem_id=semget(key,2,flag);
    if(sem_id<0){
        printf("semget failed!\n");
        return -1;
    }
    printf("creat a sem successfully:%d\n",sem_id);
    arg.val=1;
    if(semctl(sem_id,0,SETVAL,arg)==-1){
        printf("semctl setval error(first)!\n");
    }
    arg.val=0;
     if(semctl(sem_id,1,SETVAL,arg)==-1){
        printf("semctl setval error(second)!\n");
    }
    pthread_create(&p1,NULL,(void *)subp1,NULL);
    pthread_create(&p2,NULL,(void *)subp2,NULL);
    pthread_join(p1,NULL);
    pthread_join(p2,NULL);
    semctl(sem_id,0,IPC_RMID);
    semctl(sem_id,1,IPC_RMID);
    return 0;
}

void P(int semid,int index)
{
    struct sembuf sem;
    sem.sem_num = index;
    sem.sem_op = -1;
    sem.sem_flg = 0; //操作标记：0或IPC_NOWAIT等
    semop(semid,&sem,1);	//1:表示执行命令的个数
    return;
}

void V(int semid,int index)
{
    struct sembuf sem;
    sem.sem_num = index;
    sem.sem_op = 1;
    sem.sem_flg = 0; //操作标记：0或IPC_NOWAIT等
    semop(semid,&sem,1);	//1:表示执行命令的个数
    return;
}

void *subp1()
{
    int num;
    for(num=1;num<=100;num++){
        P(sem_id,1);
        printf("now sum is:%d\n",sum);
        V(sem_id,0);
    }
    return 0;
}

void *subp2()
{
    int num;
    for(num=1;num<=100;num++){
        P(sem_id,0);
        sum+=num;
        V(sem_id,1);
    }
    return 0;
}
